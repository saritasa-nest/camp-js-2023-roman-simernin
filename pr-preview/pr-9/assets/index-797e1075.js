var w=Object.defineProperty;var v=(r,t,e)=>t in r?w(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var i=(r,t,e)=>(v(r,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))a(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const o of n.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&a(o)}).observe(document,{childList:!0,subtree:!0});function e(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function a(s){if(s.ep)return;s.ep=!0;const n=e(s);fetch(s.href,n)}})();class E{constructor(t){i(this,"players");i(this,"currentIdex",-1);this.players=t}get passedPlayerIndexes(){return this.players.filter(t=>t.passStatus).map(t=>this.players.indexOf(t))}get activePlayersEnded(){return this.passedPlayerIndexes.length===this.players.length}next(){return this.activePlayersEnded?{done:!1,value:null}:(this.currentIdex++,this.currentIdex===this.players.length&&(this.currentIdex=0),this.passedPlayerIndexes.includes(this.currentIdex)&&this.next(),{done:!1,value:this.players[this.currentIdex]})}[Symbol.iterator](){return this}}class g{constructor(t,e){i(this,"gameEndedValue",!1);i(this,"dice");i(this,"allPlayers");i(this,"activePlayers");if(e.length===0)throw new Error("Player count can not be zero");this.dice=t,this.allPlayers=e,this.activePlayers=new E(e)}get gameEnded(){return this.gameEndedValue}rollDice(){if(this.gameEndedValue)throw new Error("Can not roll dice because game ended");const t=this.activePlayers.next();if(t.done||t.value===null)throw new Error("Can not roll dice without active players");const e=t.value;this.dice.roll(),e.addPoints(this.dice.currentSide)}pass(){if(this.gameEndedValue)throw new Error("Can not make a pass because game ended");const t=this.activePlayers.next();if(t.done||t.value===null)throw new Error("Can not make a pass without active players");t.value.pass(),this.activePlayers.activePlayersEnded&&this.endGame()}endGame(){const e=this.allPlayers.map(s=>s.totalPoints).filter(s=>s>0&&s<=21);if(e.length===0)for(const s of this.allPlayers)s.winStatus=!1;else{const s=Math.max(...e);for(const n of this.allPlayers)n.totalPoints===s?n.winStatus=!0:n.winStatus=!1}this.gameEndedValue=!0}}class y{constructor(){i(this,"sidesCountValue",6);i(this,"currentSideValue")}set sideCount(t){if(t<=0)throw new Error("Side count can not be equal or less then zero");this.sidesCountValue=t}get currentSide(){if(this.currentSideValue===void 0)throw new Error("Current is not defined, need to roll before");return this.currentSideValue}roll(){this.currentSideValue=this.getRandomNumber(this.sidesCountValue)}getRandomNumber(t){return Math.floor(Math.random()*t)+1}}class m{constructor(){i(this,"nameValue","no name");i(this,"lastPointsValue",0);i(this,"totalPointsValue",0);i(this,"winStatusValue");i(this,"passStatusValue",!1)}set name(t){this.nameValue=t}get name(){return this.nameValue}get lastPoints(){return this.lastPointsValue}get totalPoints(){return this.totalPointsValue}set winStatus(t){this.winStatusValue=t}get winStatus(){return this.winStatusValue}get passStatus(){return this.passStatusValue}addPoints(t){if(this.passStatusValue)throw new Error("Can not add points when player make a pass");if(t<=0)throw new Error("Can not add zero or less points");this.lastPointsValue=t,this.totalPointsValue+=t}pass(){this.passStatusValue=!0}}class x extends y{constructor(e){super();i(this,"dice");this.dice=e}set sideCount(e){this.dice.sideCount=e}get currentSide(){return this.dice.currentSide}roll(){this.dice.roll()}}class p{constructor(t){i(this,"provider");i(this,"subscribers",[]);this.provider=t}subscribe(t){if(this.subscribers.includes(t))throw new Error("Subscriber has already existed.");this.subscribers.push(t)}unsubscribe(t){const e=this.subscribers.indexOf(t);if(e===-1)throw new Error("Subscriber does not exist.");this.subscribers.splice(e,1)}notify(){for(const t of this.subscribers)t.update(this.provider())}}class V extends x{constructor(e){super(e);i(this,"providedPublisher");this.providedPublisher=new p(()=>({currentSide:e.currentSide}))}roll(){super.roll(),this.providedPublisher.notify()}subscribe(e){this.providedPublisher.subscribe(e)}unsubscribe(e){this.providedPublisher.unsubscribe(e)}notify(){this.providedPublisher.notify()}}class f extends m{constructor(e){super();i(this,"player");this.player=e}set name(e){this.player.name=e}get name(){return this.player.name}get lastPoints(){return this.player.lastPoints}get totalPoints(){return this.player.totalPoints}set winStatus(e){this.player.winStatus=e}get winStatus(){return this.player.winStatus}get passStatus(){return this.player.passStatus}addPoints(e){this.player.addPoints(e)}pass(){this.player.pass()}}class C extends f{constructor(e){super(e);i(this,"providedPublisher");this.providedPublisher=new p(()=>({playerName:e.name,points:e.lastPoints}))}addPoints(e){super.addPoints(e),this.providedPublisher.notify()}subscribe(e){this.providedPublisher.subscribe(e)}unsubscribe(e){this.providedPublisher.unsubscribe(e)}notify(){this.providedPublisher.notify()}}class k extends f{constructor(e){super(e);i(this,"providedPublisher");this.providedPublisher=new p(()=>{if(e.winStatus===void 0)throw new Error("Play win status is not defined");return{playerName:e.name,winStatus:e.winStatus}})}set winStatus(e){super.winStatus=e,this.providedPublisher.notify()}subscribe(e){this.providedPublisher.subscribe(e)}unsubscribe(e){this.providedPublisher.unsubscribe(e)}notify(){this.providedPublisher.notify()}}function I(r){let t=new y;const e=new V(t);e.subscribe(r.currentDiceSideSubscriber),t=e;const a=[],s=[];for(const l of r.playerNames){const P=new m;P.name=l;const u=new C(P);u.subscribe(r.playerPointsSubscriber),s.push(()=>u.unsubscribe(r.playerPointsSubscriber));const c=new k(u);c.subscribe(r.playerWinStatusSubscriber),s.push(()=>c.unsubscribe(r.playerWinStatusSubscriber)),a.push(c)}return{blackjackInstanse:new g(t,a),clearSubscriptions:()=>{e.unsubscribe(r.currentDiceSideSubscriber);for(const l of s)l()}}}class N{constructor(){i(this,"dicePointsSum",0)}update(t){this.dicePointsSum+=t.currentSide,this.presentUpdatedPointSum(this.dicePointsSum),this.presentAppendedPoints(t.currentSide)}presentUpdatedPointSum(t){const e=document.getElementById("dice-points-sum");if(e===null)throw new Error("Dice points sum element is missed");e.textContent=t.toString()}presentAppendedPoints(t){const e=document.createElement("li");e.textContent=t.toString();const a=document.getElementById("dice-points-list");if(a===null)throw new Error("Dice points list element is missed");a.appendChild(e)}}class D{constructor(){i(this,"playerPointsSums",new Map)}update(t){let e=this.playerPointsSums.get(t.playerName);e===void 0?e=t.points:e+=t.points,this.playerPointsSums.set(t.playerName,e),this.presentUpdatedPointSum(t.playerName,e),this.presentAppendedPoints(t.playerName,t.points)}presentUpdatedPointSum(t,e){const a=document.getElementById(`${t}-points-sum`);if(a===null)throw new Error("Player points sum element is missed");a.textContent=e.toString()}presentAppendedPoints(t,e){const a=document.createElement("li");a.textContent=e.toString();const s=document.getElementById(`${t}-points-list`);if(s===null)throw new Error("Player points list element is missed");s.appendChild(a)}}class L{update(t){const e=document.getElementById(`${t.playerName}-points-container`);if(e===null)throw new Error("Player points container element is missed");t.winStatus===!0?e.classList.add("gamer-points-container--winner"):e.classList.add("gamer-points-container--looser")}}const S=I({diceSideCount:6,playerNames:["computer","self"],currentDiceSideSubscriber:new N,playerPointsSubscriber:new D,playerWinStatusSubscriber:new L}),d=S.blackjackInstanse,b=document.getElementById("roll-button"),h=document.getElementById("pass-button");if(b===null)throw new Error("Roll button is missed.");if(h===null)throw new Error("Pass button is missed.");b.addEventListener("click",()=>{d.rollDice()});h.addEventListener("click",()=>{d.pass(),d.gameEnded&&(S.clearSubscriptions(),b.classList.add("blackjack-actions-container__action--game-ended"),h.classList.add("blackjack-actions-container__action--game-ended"))});
